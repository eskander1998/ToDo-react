[{"C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\index.js":"1","C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\App.js":"2","C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\components\\TodoList.js":"4","C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\components\\TodoDetail.js":"5"},{"size":628,"mtime":1684189870609,"results":"6","hashOfConfig":"7"},{"size":422,"mtime":1684191954898,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":5107,"mtime":1684223440952,"results":"10","hashOfConfig":"7"},{"size":1239,"mtime":1684223441002,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ep5v2d",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\index.js",[],[],"C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\App.js",[],[],"C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\components\\TodoList.js",["29","30"],[],"import { useEffect, useState } from \"react\";\r\nimport \"../components/style.css\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nexport default function TaskList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [taskTitle, setTaskTitle] = useState(\"\");\r\n  const [taskDescription, setTaskDescription] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://backend-rho-cyan.vercel.app/todos\").then((response) => {\r\n      console.log(`ðŸ‘€ `, response.data)\r\n      const sortedTodos = response.data.sort((a, b) => {\r\n        if (a.status === b.status) {\r\n          // Si les tÃ¢ches ont le mÃªme statut\r\n          if (a.status === \"incompleted\") {\r\n            // Trier les tÃ¢ches \"incompleted\" par date de crÃ©ation dÃ©croissante\r\n            return new Date(b.createdAt) - new Date(a.createdAt);\r\n          } else {\r\n            // Trier les tÃ¢ches \"completed\" par date de mise Ã  jour croissante\r\n            return new Date(a.updatedAt) - new Date(b.updatedAt);\r\n          }\r\n        } else {\r\n          // Trier les tÃ¢ches \"incompleted\" avant les tÃ¢ches \"completed\"\r\n          return a.status === \"incompleted\" ? -1 : 1;\r\n        }\r\n      });\r\n      setTodos(sortedTodos);\r\n\r\n    });\r\n  }, []);\r\n\r\n\r\n  const updateTaskOrder = (task) => {\r\n    const updatedTask = {\r\n      ...task\r\n    };\r\n\r\n    axios.put(`https://backend-rho-cyan.vercel.app/todos/${task._id}`, updatedTask).then((response) => {\r\n      const updatedTaskFromResponse = response.data;\r\n      const updatedTodos = [...todos];\r\n      const index = updatedTodos.findIndex((t) => t._id === task._id);\r\n\r\n      if (index !== -1) {\r\n        updatedTodos.splice(index, 1);\r\n        if (updatedTaskFromResponse.status===\"completed\") {\r\n          updatedTodos.push(updatedTaskFromResponse);\r\n        } else {\r\n          let i = updatedTodos.findIndex((t) => t._id > updatedTaskFromResponse._id);\r\n          if (i === -1) i = updatedTodos.length;\r\n          updatedTodos.splice(i, 0, updatedTaskFromResponse);\r\n          updatedTodos.sort((a, b) => {\r\n            if (a.status === b.status) {\r\n              // Si les tÃ¢ches ont le mÃªme statut\r\n              if (a.status === \"incompleted\") {\r\n                // Trier les tÃ¢ches \"incompleted\" par date de crÃ©ation dÃ©croissante\r\n                return new Date(b.createdAt) - new Date(a.createdAt);\r\n              } else {\r\n                // Trier les tÃ¢ches \"completed\" par date de mise Ã  jour croissante\r\n                return new Date(a.updatedAt) - new Date(b.updatedAt);\r\n              }\r\n            } else {\r\n              // Trier les tÃ¢ches \"incompleted\" avant les tÃ¢ches \"completed\"\r\n              return a.status === \"incompleted\" ? -1 : 1;\r\n            }\r\n          });\r\n        }\r\n         \r\n        setTodos(updatedTodos);\r\n        \r\n      }\r\n    });\r\n  };\r\n\r\n  const addTask = (e) => {\r\n    e.preventDefault(); // empÃªcher le comportement par dÃ©faut du formulaire\r\n\r\n    const newTask = {\r\n      title: taskTitle,\r\n      completed: false,\r\n      description: taskDescription,\r\n    };\r\n    axios.post(\"https://backend-rho-cyan.vercel.app/todos\", newTask).then((response) => {\r\n      const taskToAdd = { ...response.data };\r\n      setTodos([taskToAdd, ...todos]);\r\n      setTaskTitle(\"\");\r\n      setTaskDescription(\"\");\r\n    });\r\n  };\r\n\r\n  const viewTodoDetails = ( task) => {\r\n    navigate(`/tododetail/${task._id}` );\r\n\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Sogeti-logo-2018.svg/1200px-Sogeti-logo-2018.svg.png\"\r\n          alt=\"Capgemini image\"\r\n        />\r\n      </div>\r\n\r\n\r\n      <form onSubmit={addTask}>\r\n        <input\r\n          type=\"text\"\r\n          value={taskTitle}\r\n          onChange={(e) => setTaskTitle(e.target.value)}\r\n          placeholder=\"Task title\"\r\n          required\r\n        />\r\n        <textarea\r\n          value={taskDescription}\r\n          onChange={(e) => setTaskDescription(e.target.value)}\r\n          placeholder=\"Task Description\"\r\n        />\r\n        <button type=\"submit\">Add task</button>\r\n      </form>\r\n      <div className=\"todo-list\">\r\n        <ul>\r\n          {todos.map((task) => (\r\n            <li key={task._id}>\r\n              <div>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={task.status === 'completed' ? true : false}\r\n                  onChange={() => updateTaskOrder(task)}\r\n\r\n                />\r\n                <a className={task.status === 'completed' ? 'completed' : ''}\r\n                  onClick={() => viewTodoDetails(task)}\r\n                >\r\n                  {task.title}\r\n                </a>\r\n              </div>\r\n              <span className={`task-status ${task.status === 'completed' ? 'completed' : 'not-completed'}`}>\r\n                {task.taskStatus}\r\n\r\n                {task.status === 'completed' ? 'completed' : 'not-completed'}\r\n              </span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Skander\\Desktop\\Capgemini\\react\\todo-app\\client\\src\\components\\TodoDetail.js",["31","32"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction TodoDetail() {\r\n  const [todo, setTodo] = useState([]);\r\n\r\n  const params = useParams();\r\n  const { id } = params;\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://backend-rho-cyan.vercel.app/todos/\" + id).then((response) => {\r\n      setTodo(response.data);\r\n\r\n    });\r\n  }, []);\r\n\r\n  const navigate = useNavigate();\r\n  const goToMenu = () => {\r\n    navigate(`/`);\r\n  }\r\n  return (\r\n    <div className=\"todo-detail\">\r\n      <div className=\"image-container\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Sogeti-logo-2018.svg/1200px-Sogeti-logo-2018.svg.png\"\r\n          alt=\"Capgemini Image\"\r\n        />\r\n      </div>\r\n      <button onClick={goToMenu} className=\"back-btn\">\r\n        Back\r\n      </button>\r\n      <div className=\"todo-info\">\r\n        <h2>{todo.title}</h2>\r\n        <p>{todo.description}</p>\r\n        <div className={`todo-status ${todo.status=== 'completed'? 'completed' : 'notCompleted'}`}>\r\n          {todo.status}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoDetail;",{"ruleId":"33","severity":1,"message":"34","line":101,"column":9,"nodeType":"35","endLine":104,"endColumn":11},{"ruleId":"36","severity":1,"message":"37","line":134,"column":17,"nodeType":"35","endLine":136,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":17,"column":6,"nodeType":"40","endLine":17,"endColumn":8,"suggestions":"41"},{"ruleId":"33","severity":1,"message":"34","line":26,"column":9,"nodeType":"35","endLine":29,"endColumn":11},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["42"],{"desc":"43","fix":"44"},"Update the dependencies array to be: [id]",{"range":"45","text":"46"},[447,449],"[id]"]